# bot.py
# Main file for the Manager Bot (v1.3 - Entity Error Fix & Hindi Language)

import asyncio
import logging
import re
from telethon import TelegramClient, events, Button
from telethon.sessions import StringSession
from telethon.errors import UserNotParticipantError, ChatAdminRequiredError
from telethon.tl.functions.channels import EditAdminRequest
from telethon.tl.types import ChatAdminRights

import config
import database as db

# --- Logging Setup ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
LOGGER = logging.getLogger(__name__)

# --- Bot Initialization ---
bot = TelegramClient('manager_bot_session', config.API_ID, config.API_HASH).start(bot_token=config.BOT_TOKEN)
user_client = None  # Userbot client will be initialized after login

# --- Helper Functions ---
async def initialize_user_client():
    """Initialize the userbot client from stored session."""
    global user_client
    owner = db.get_user(config.OWNER_ID)
    if owner and owner.get('session_string'):
        session = StringSession(owner['session_string'])
        user_client = TelegramClient(session, config.API_ID, config.API_HASH,
                                       device_model=config.DEVICE_MODEL,
                                       system_version=config.SYSTEM_VERSION,
                                       app_version=config.APP_VERSION,
                                       lang_code=config.LANG_CODE,
                                       system_lang_code=config.SYSTEM_LANG_CODE)
        await user_client.connect()
        if await user_client.is_user_authorized():
            me = await user_client.get_me()
            LOGGER.info(f"тЬЕ Userbot client initialized for: @{me.username}")
            return True
    LOGGER.warning("тЪая╕П Userbot session not found or invalid. Please login.")
    return False

# --- Bot Event Handlers ---

@bot.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    user_id = event.sender_id
    db.add_user(user_id, event.sender.first_name, event.sender.username)

    if user_id == config.OWNER_ID:
        # Owner's special interface
        is_logged_in = user_client and user_client.is_connected()
        
        buttons = [
            [Button.text("ЁЯФТ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ" if not is_logged_in else "тЬЕ рд▓реЙрдЧрд┐рди рд╣реЛ рдЧрдпрд╛", resize=True)],
            [Button.text("ЁЯМР рдХрдиреЗрдХреНрдЯреЗрдб рдЪреИрдЯреНрд╕"), Button.text("ЁЯдЦ рдирдпрд╛ рдмреЙрдЯ рдЬреЛрдбрд╝реЗрдВ")],
            [Button.text("ЁЯУК рдЖрдБрдХрдбрд╝реЗ"), Button.text("ЁЯУг рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ")]
        ]
        await event.respond("ЁЯСС **рд╕реНрд╡рд╛рдЧрдд рд╣реИ, рдорд╛рд▓рд┐рдХ!**\nрдпрд╣ рдЖрдкрдХрд╛ рдореИрдиреЗрдЬрд░ рдмреЙрдЯ рдХрдВрдЯреНрд░реЛрд▓ рдкреИрдирд▓ рд╣реИред", buttons=buttons)
    else:
        # Normal user interface
        me = await bot.get_me()
        buttons = [[Button.url("тЮХ рдореБрдЭреЗ рдПрдХ рдЧреНрд░реБрдк рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ тЮХ", f"https://t.me/{me.username}?startgroup=true")]]
        await event.respond(
            "**рдирдорд╕реНрддреЗ!** ЁЯСЛ\n\nрдореИрдВ рдПрдХ рдЧреНрд░реБрдк рдореИрдиреЗрдЬрдореЗрдВрдЯ рдмреЙрдЯ рд╣реВрдБред\n\n"
            "**рдирд┐рд░реНрджреЗрд╢:**\n"
            "1. рдореБрдЭреЗ рдЕрдкрдиреЗ рдЧреНрд░реБрдк рдореЗрдВ рдЬреЛрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред\n"
            "2. рдореБрдЭреЗ рдкреВрд░реЗ рдЕрдзрд┐рдХрд╛рд░реЛрдВ рдХреЗ рд╕рд╛рде рдПрдбрдорд┐рди рдмрдирд╛рдПрдВред\n"
            "рдореИрдВ рдЧреНрд░реБрдк рдХреЗ рдорд╛рд▓рд┐рдХ рдХреЛ рдЕрдиреНрдп рдмреЙрдЯреНрд╕ рдХреЛ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░реВрдБрдЧрд╛ред",
            buttons=buttons
        )

@bot.on(events.ChatAction)
async def chat_action_handler(event):
    """Detect when the bot is added to a new group."""
    me = await bot.get_me()
    if event.user_added and event.user_id == me.id:
        chat = await event.get_chat()
        owner = await event.get_user()
        
        await bot.send_message(
            config.OWNER_ID,
            f"тЬЕ **рдирдпрд╛ рдЧреНрд░реБрдк рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛!**\n\n"
            f"**рдЧреНрд░реБрдк:** {chat.title} (`{chat.id}`)\n"
            f"**рдХрд┐рд╕рдиреЗ рдЬреЛрдбрд╝рд╛:** {owner.first_name} (@{owner.username or 'N/A'})"
        )
        db.add_connected_chat(chat.id, chat.title)

# --- Owner Command Handlers ---

@bot.on(events.NewMessage(from_users=config.OWNER_ID, func=lambda e: e.is_private))
async def owner_commands_handler(event):
    text = event.raw_text

    owner = db.get_user(config.OWNER_ID)
    if owner and owner.get('state') == 'awaiting_phone':
        phone_match = re.match(r'\+?\d[\d\s-]{8,}\d', text)
        if phone_match:
            await process_login_phone(event, phone_match.group(0).strip())
            return

    if text == "ЁЯФТ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ":
        db.update_user_state(config.OWNER_ID, 'awaiting_phone')
        await event.respond(
            "рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдлрд╝реЛрди рдирдВрдмрд░ рднреЗрдЬреЗрдВ (рдХрдВрдЯреНрд░реА рдХреЛрдб рдХреЗ рд╕рд╛рде, рдЬреИрд╕реЗ `+919876543210`) рдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
            buttons=Button.request_phone("ЁЯУ▒ рд╕рдВрдкрд░реНрдХ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ", resize=True)
        )
    
    elif text == "ЁЯМР рдХрдиреЗрдХреНрдЯреЗрдб рдЪреИрдЯреНрд╕":
        if not user_client: return await event.respond("тЪая╕П рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВред")
        chats = db.get_connected_chats()
        if not chats: return await event.respond("ЁЯУн рдХреЛрдИ рдХрдиреЗрдХреНрдЯреЗрдб рдЪреИрдЯ рдирд╣реАрдВ рдорд┐рд▓реАред")
        
        response = "**ЁЯМР рдХрдиреЗрдХреНрдЯреЗрдб рдЪреИрдЯреНрд╕:**\n\n"
        for chat in chats:
            response += f"тАв **{chat['title']}** (`{chat['chat_id']}`)\n"
        await event.respond(response)

    elif text == "ЁЯдЦ рдирдпрд╛ рдмреЙрдЯ рдЬреЛрдбрд╝реЗрдВ":
        if not user_client: return await event.respond("тЪая╕П рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВред")
        async with bot.conversation(config.OWNER_ID) as conv:
            await conv.send_message("рдХреГрдкрдпрд╛ рдЙрд╕ **рдирдП рдмреЙрдЯ** рдХрд╛ **рдпреВрдЬрд░рдиреЗрдо** рднреЗрдЬреЗрдВ рдЬрд┐рд╕реЗ рдЖрдк рдПрдбрдорд┐рди рдХреЗ рд░реВрдк рдореЗрдВ рдЬреЛрдбрд╝рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ (рдЬреИрд╕реЗ, `@NewBot`).")
            new_bot_username = await conv.get_response()
            await add_bot_process(event, new_bot_username.text.strip())

    elif text == "ЁЯУК рдЖрдБрдХрдбрд╝реЗ":
        total_users = len(db.get_all_users())
        connected_chats = len(db.get_connected_chats())
        await event.respond(f"**ЁЯУК рдмреЙрдЯ рдХреЗ рдЖрдБрдХрдбрд╝реЗ:**\n\n"
                            f"ЁЯСд **рдХреБрд▓ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛:** {total_users}\n"
                            f"ЁЯМР **рдХрдиреЗрдХреНрдЯреЗрдб рдЪреИрдЯреНрд╕:** {connected_chats}")

    elif text == "ЁЯУг рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ":
        async with bot.conversation(config.OWNER_ID) as conv:
            await conv.send_message("рдХреГрдкрдпрд╛ рд╡рд╣ рд╕рдВрджреЗрд╢ рднреЗрдЬреЗрдВ рдЬрд┐рд╕реЗ рдЖрдк рд╕рднреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред")
            message_to_broadcast = await conv.get_response()
            
            users = db.get_all_users()
            sent_count = 0
            failed_count = 0
            status_msg = await conv.send_message(f"ЁЯЪА {len(users)} рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рд╢реБрд░реВ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...")
            
            for user in users:
                if user['user_id'] != config.OWNER_ID:
                    try:
                       await bot.send_message(user['user_id'], message_to_broadcast)
                       sent_count += 1
                    except Exception:
                        failed_count += 1
                    await asyncio.sleep(0.1)
            
            await status_msg.edit(f"тЬЕ **рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдкреВрд░рд╛ рд╣реБрдЖ!**\n\n"
                                  f"ЁЯУм **рднреЗрдЬрд╛ рдЧрдпрд╛:** {sent_count}\n"
                                  f"тЭМ **рд╡рд┐рдлрд▓:** {failed_count}")

# --- Login Process ---

@bot.on(events.NewMessage(func=lambda e: e.is_private and e.contact and e.sender_id == config.OWNER_ID))
async def phone_handler_button(event):
    phone = event.message.contact.phone_number
    await process_login_phone(event, phone)

async def process_login_phone(event, phone_number):
    db.update_user_state(config.OWNER_ID, None)
    temp_client = TelegramClient(StringSession(), config.API_ID, config.API_HASH)
    await temp_client.connect()
    
    async with bot.conversation(config.OWNER_ID, timeout=300) as conv:
        try:
            code_request = await temp_client.send_code_request(phone_number)
            await conv.send_message("рдХреГрдкрдпрд╛ рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рд╕реЗ рдкреНрд░рд╛рдкреНрдд рдУрдЯреАрдкреА рднреЗрдЬреЗрдВред")
            otp_code = await conv.get_response()
            
            await temp_client.sign_in(phone_number, code=otp_code.text, phone_code_hash=code_request.phone_code_hash)
            
        except Exception as e:
            if "password" in str(e).lower():
                await conv.send_message("рдЖрдкрдХреЗ рдЦрд╛рддреЗ рдореЗрдВ 2FA рд╕рдХреНрд╖рдо рд╣реИред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдкрд╛рд╕рд╡рд░реНрдб рднреЗрдЬреЗрдВред")
                password = await conv.get_response()
                await temp_client.sign_in(password=password.text)
            else:
                await conv.send_message(f"тЭМ рд▓реЙрдЧрд┐рди рд╡рд┐рдлрд▓: {e}")
                if temp_client.is_connected(): await temp_client.disconnect()
                return
        
        session_string = temp_client.session.save()
        db.update_session(config.OWNER_ID, session_string)
        if temp_client.is_connected(): await temp_client.disconnect()
        await conv.send_message("тЬЕ **рд▓реЙрдЧрд┐рди рд╕рдлрд▓!** Userbot рдЕрдм рд╕рдХреНрд░рд┐рдп рд╣реИред")
        await initialize_user_client()

# --- Core "Add Bot" Logic ---

async def add_bot_process(event, new_bot_username):
    if not user_client: return await event.respond("тЪая╕П Userbot active nahi hai. Pehle login karein.")
    chats = db.get_connected_chats()
    total_chats = len(chats)
    if total_chats == 0:
        return await event.respond("рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рдХрдиреЗрдХреНрдЯреЗрдб рдЪреИрдЯ рдирд╣реАрдВ рд╣реИред")

    status_msg = await event.respond(f"ЁЯФД {total_chats} рдЪреИрдЯреНрд╕ рдХреЗ рд▓рд┐рдП рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд╢реБрд░реВ рд╣реЛ рд░рд╣реА рд╣реИ...")
    admin_done, admin_failed = 0, 0
    
    admin_rights = ChatAdminRights(
        change_info=True, post_messages=True, edit_messages=True,
        delete_messages=True, ban_users=True, invite_users=True,
        pin_messages=True, add_admins=True, manage_call=True
    )

    for i, chat_info in enumerate(chats):
        chat_id = chat_info['chat_id']
        chat_title = chat_info['title']
        
        if i > 0 and i % 4 == 0:
            try:
                await status_msg.edit(
                    f"**ЁЯФД рдкреНрд░рдЧрддрд┐: {i}/{total_chats}**\n\n"
                    f"тЬЕ **рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛:** {admin_done}\n"
                    f"тЭМ **рд╡рд┐рдлрд▓:** {admin_failed}\n\n"
                    f"рдЕрднреА рдкреНрд░реЛрд╕реЗрд╕ рд╣реЛ рд░рд╣рд╛ рд╣реИ: *{chat_title}*..."
                )
            except: pass
        
        try:
            # **ERROR FIX:** Pehle entity hasil karein
            LOGGER.info(f"Resolving entity for {new_bot_username}")
            new_bot_entity = await user_client.get_entity(new_bot_username)
            
            LOGGER.info(f"Promoting {new_bot_username} in {chat_title}")
            await user_client(EditAdminRequest(
                channel=chat_id,
                user_id=new_bot_entity.id,
                admin_rights=admin_rights,
                rank='bot'
            ))
            
            admin_done += 1
            
        except ChatAdminRequiredError:
            LOGGER.error(f"{chat_title} рдореЗрдВ рд╡рд┐рдлрд▓: Userbot рдПрдбрдорд┐рди рдирд╣реАрдВ рд╣реИ рдпрд╛ рдЙрд╕рдХреЗ рдкрд╛рд╕ рдЕрдзрд┐рдХрд╛рд░ рдирд╣реАрдВ рд╣реИрдВред")
            admin_failed += 1
        except Exception as e:
            LOGGER.error(f"{chat_title} рдореЗрдВ рдПрдХ рдЕрдкреНрд░рддреНрдпрд╛рд╢рд┐рдд рддреНрд░реБрдЯрд┐ рд╣реБрдИ: {e}")
            admin_failed += 1
        
        await asyncio.sleep(5) 

    await status_msg.edit(
        f"тЬЕ **рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдкреВрд░реА рд╣реБрдИ!**\n\n"
        f"**рдХреБрд▓ рдЪреИрдЯреНрд╕:** {total_chats}\n"
        f"тЬЕ **рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛:** {admin_done}\n"
        f"тЭМ **рд╡рд┐рдлрд▓:** {admin_failed}"
    )

# --- Main Execution ---
async def main():
    LOGGER.info("Bot starting...")
    if "state" not in (db.users_col.find_one() or {}):
        db.users_col.update_many({}, {"$set": {"state": None}})
        LOGGER.info("Added 'state' field to user documents.")

    await initialize_user_client()
    await bot.run_until_disconnected()

if __name__ == "__main__":
    def update_user_state(user_id, state):
        db.users_col.update_one({"user_id": user_id}, {"$set": {"state": state}})
    
    db.update_user_state = update_user_state
    
    bot.loop.run_until_complete(main())
